"use strict";function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof(obj);}var _react=_interopRequireDefault(require("react"));var _enzyme=_interopRequireWildcard(require("enzyme"));var _enzymeAdapterReact=_interopRequireDefault(require("enzyme-adapter-react-16"));var _immutable=_interopRequireDefault(require("immutable"));var _component=_interopRequireWildcard(require("../../zashiki/component"));function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function _getRequireWildcardCache(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||_typeof(obj)!=="object"&&typeof obj!=="function"){return{"default":obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj["default"]=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj};}_enzyme["default"].configure({adapter:new _enzymeAdapterReact["default"]()});jest.mock('immutable',function(){return{is:jest.fn(),Map:jest.fn().mockImplementation(function(map){return map;})};});describe('@modernpoacher/zashiki-react-redux/app/components/zashiki/component',function(){var MOCK_ONMOUNT=jest.fn();var MOCK_MATCH={params:{alpha:'MOCK ALPHA',omega:'MOCK OMEGA'}};var MOCK_CHILDREN=[];beforeEach(function(){jest.clearAllMocks();});describe('Always',function(){var component=_react["default"].createElement(_component["default"],{onMount:MOCK_ONMOUNT,match:MOCK_MATCH,children:MOCK_CHILDREN});var spy=jest.spyOn(_component["default"].prototype,'componentDidMount');beforeEach(function(){(0,_enzyme.shallow)(component);});it('invokes `componentDidMount`',function(){expect(spy).toHaveBeenCalled();});it('invokes `onMount`',function(){expect(MOCK_ONMOUNT).toHaveBeenCalledWith({alpha:'MOCK ALPHA',omega:'MOCK OMEGA'});});});describe('`resource`',function(){it('is defined',function(){expect(_component.resource).toBeDefined();});});describe('`Zashiki.getDerivedStateFromProps`',function(){it('is defined',function(){expect(_component["default"].getDerivedStateFromProps).toBeDefined();});});describe('`resource()`',function(){describe('`alpha` is a string',function(){expect((0,_component.resource)('MOCK ALPHA')).toEqual({alpha:'MOCK ALPHA'});});describe('`alpha` is a string and `omega` is a string',function(){expect((0,_component.resource)('MOCK ALPHA','MOCK OMEGA')).toEqual({alpha:'MOCK ALPHA',omega:'MOCK OMEGA'});});});describe('`Zashiki.getDerivedStateFromProps()`',function(){describe('props have changed',function(){var mockProps={match:MOCK_MATCH,onMount:MOCK_ONMOUNT};var mockState={now:{alpha:'MOCK ALPHA'}};var state;beforeEach(function(){_immutable["default"].is.mockReturnValue(false);state=_component["default"].getDerivedStateFromProps(mockProps,mockState);});it('invokes `Immutable.is`',function(){expect(_immutable["default"].is).toBeCalledWith({alpha:'MOCK ALPHA'},{alpha:'MOCK ALPHA',omega:'MOCK OMEGA'});});it('returns the state',function(){expect(state).toEqual({was:{alpha:'MOCK ALPHA'},now:{alpha:'MOCK ALPHA',omega:'MOCK OMEGA'}});});it('invokes `onMount`',function(){expect(MOCK_ONMOUNT).toBeCalledWith({alpha:'MOCK ALPHA',omega:'MOCK OMEGA'});});});describe('props have not changed',function(){var mockProps={match:MOCK_MATCH,onMount:MOCK_ONMOUNT};var mockState={now:{alpha:'MOCK ALPHA',omega:'MOCK OMEGA'}};var state;beforeEach(function(){_immutable["default"].is.mockReturnValue(true);state=_component["default"].getDerivedStateFromProps(mockProps,mockState);});it('invokes `Immutable.is`',function(){expect(_immutable["default"].is).toBeCalledWith({alpha:'MOCK ALPHA',omega:'MOCK OMEGA'},{alpha:'MOCK ALPHA',omega:'MOCK OMEGA'});});it('returns the state',function(){expect(state).toEqual({now:{alpha:'MOCK ALPHA',omega:'MOCK OMEGA'}});});it('does not invoke `onMount`',function(){expect(MOCK_ONMOUNT).not.toBeCalled();});});});});