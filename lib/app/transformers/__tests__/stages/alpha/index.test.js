"use strict";var _transmission=require("shinkansen-engine/lib/transformers/transmission");var _alpha=require("../../../stages/alpha");var _=require("../../..");jest.mock('shinkansen-engine/lib/components/signals',function(){return{FAILURE:'MOCK FAILURE'};});jest.mock('shinkansen-engine/lib/transformers/transmission',function(){return{toZashiki:jest.fn().mockReturnValue('MOCK ZASHIKI')};});jest.mock("../../..",function(){return{transformFailure:jest.fn()};});describe('@modernpoacher/zashiki-react-redux/app/transformers/stages/alpha',function(){describe('`transform`',function(){it('is defined',function(){expect(_alpha.transform).toBeDefined();});});describe('`transform()`',function(){describe('With parameters',function(){afterEach(function(){jest.clearAllMocks();});describe('`status` is `Signals.FAILURE`',function(){it('invokes `transformFailure`',function(){(0,_alpha.transform)({status:'MOCK FAILURE'});expect(_.transformFailure).toBeCalledWith('MOCK FAILURE',{});});});describe('`status` is not `Signals.FAILURE`',function(){it('does not invoke `transformFailure`',function(){(0,_alpha.transform)({status:'MOCK STATUS'});expect(_.transformFailure).not.toBeCalled();});it('returns an object',function(){expect((0,_alpha.transform)({status:'MOCK STATUS'})).toEqual({status:'MOCK STATUS',definitions:[],gears:{forward:{},reverse:{}},state:{count:0,index:0}});});describe('`omega` is an array',function(){var returnValue;beforeEach(function(){jest.clearAllMocks();returnValue=(0,_alpha.transform)({status:'MOCK STATUS',omega:[{resource:'MOCK RESOURCE',definition:'MOCK DEFINITION',response:'MOCK RESPONSE'}]});});it('invokes `toZashiki`',function(){expect(_transmission.toZashiki).toBeCalledWith('MOCK DEFINITION','MOCK RESPONSE');});it('returns an object',function(){expect(returnValue).toEqual({status:'MOCK STATUS',definitions:[{definition:'MOCK ZASHIKI',resource:'MOCK RESOURCE',response:'MOCK RESPONSE'}],gears:{forward:{},reverse:{}},state:{count:0,index:0}});});});});describe('`gears` is an object',function(){it('returns an object with `gears` and default values',function(){expect((0,_alpha.transform)({status:'MOCK STATUS',gears:{forward:{alpha:'MOCK ALPHA',omega:'MOCK OMEGA'},reverse:{alpha:'MOCK ALPHA',omega:'MOCK OMEGA'}}})).toEqual({status:'MOCK STATUS',definitions:[],state:{count:0,index:0},gears:{forward:{alpha:'MOCK ALPHA',omega:'MOCK OMEGA'},reverse:{alpha:'MOCK ALPHA',omega:'MOCK OMEGA'}}});});});describe('`state` is an object',function(){it('returns an object with `state` and default values',function(){expect((0,_alpha.transform)({status:'MOCK STATUS',state:{index:'MOCK INDEX',count:'MOCK COUNT'}})).toEqual({status:'MOCK STATUS',definitions:[],gears:{forward:{},reverse:{}},state:{index:'MOCK INDEX',count:'MOCK COUNT'}});});});});describe('Without parameters',function(){it('invokes `transformFailure`',function(){(0,_alpha.transform)({status:'MOCK FAILURE'});expect(_.transformFailure).toBeCalledWith('MOCK FAILURE',{});});});});});